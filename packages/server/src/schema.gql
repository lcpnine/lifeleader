# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CreateMandalaChartFailure {
  errorType: CreateMandalaChartFailureType!
}

enum CreateMandalaChartFailureType {
  INVALID_INPUT
  NO_TITLE
  SERVER_ERROR
  UNAUTHORIZED_ACCESS
}

input CreateMandalaChartInput {
  centerCell: MandalaCellInput!
  description: String
  private: Boolean!
  surroundingCells: [MandalaCellInput!]!
  title: String!
}

union CreateMandalaChartResponse = CreateMandalaChartFailure | CreateMandalaChartSuccess

type CreateMandalaChartSuccess {
  _id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteAccountFailure {
  errorType: DeleteAccountFailureType!
}

enum DeleteAccountFailureType {
  INVALID_REQUEST
  USER_NOT_FOUND
}

union DeleteAccountResponse = DeleteAccountFailure | DeleteAccountSuccess

type DeleteAccountSuccess {
  success: Boolean!
}

type DeleteMandalaChartFailure {
  errorType: DeleteMandalaChartFailureType!
}

enum DeleteMandalaChartFailureType {
  CHART_NOT_FOUND
  SERVER_ERROR
  UNAUTHORIZED_ACCESS
}

input DeleteMandalaChartInput {
  mandalaChartId: ID!
}

union DeleteMandalaChartResponse = DeleteMandalaChartFailure | DeleteMandalaChartSuccess

type DeleteMandalaChartSuccess {
  _id: ID!
}

type FindPasswordFailure {
  errorType: FindPasswordFailureType!
}

enum FindPasswordFailureType {
  SERVER_ERROR
  USER_NOT_FOUND
}

union FindPasswordResponse = FindPasswordFailure | FindPasswordSuccess

type FindPasswordSuccess {
  success: Boolean!
}

type GetMandalaChartFailure {
  errorType: GetMandalaChartFailureType!
}

enum GetMandalaChartFailureType {
  CHART_NOT_FOUND
  SERVER_ERROR
  UNAUTHORIZED_ACCESS
}

input GetMandalaChartInput {
  mandalaChartId: ID!
}

union GetMandalaChartResponse = GetMandalaChartFailure | GetMandalaChartSuccess

type GetMandalaChartSuccess {
  mandalaChart: MandalaChart!
}

type GetUserMandalaChartsFailure {
  errorType: GetUserMandalaChartsFailureType!
}

enum GetUserMandalaChartsFailureType {
  SERVER_ERROR
}

input GetUserMandalaChartsInput {
  userId: ID!
}

union GetUserMandalaChartsResponse = GetUserMandalaChartsFailure | GetUserMandalaChartsSuccess

type GetUserMandalaChartsSuccess {
  mandalaCharts: [MandalaChart!]!
}

type MandalaCell {
  _id: ID!
  goal: String!
  tasks: [String!]!
}

input MandalaCellInput {
  goal: String!
  tasks: [String!]!
}

type MandalaChart {
  _id: ID!
  centerCell: MandalaCell!
  description: String!
  private: Boolean!
  surroundingCells: [MandalaCell!]!
  title: String!
  userId: ID!
}

type Mutation {
  createMandalaChart(input: CreateMandalaChartInput!): CreateMandalaChartResponse!
  deleteAccount(email: String!): DeleteAccountResponse!
  deleteMandalaChart(input: DeleteMandalaChartInput!): DeleteMandalaChartResponse!
  findPassword(email: String!): FindPasswordResponse!
  resetPassword(newPassword: String!, newPasswordConfirm: String!, token: String!): ResetPasswordResponse!
  signIn(email: String!, keepSignedIn: Boolean!, password: String!): SignInResponse!
  signOut: Boolean!
  signUp(email: String!, nickname: String!, password: String!, passwordConfirm: String!): SignUpResponse!
  updateMandalaChart(input: UpdateMandalaChartInput!): UpdateMandalaChartResponse!
  verifyEmail(token: String!): VerifyEmailResponse!
}

type PurchasedInfo {
  expiresAt: DateTime
  isPurchased: Boolean!
  purchasedAt: DateTime
}

type Query {
  checkUser: User
  getMandalaChart(input: GetMandalaChartInput!): GetMandalaChartResponse!
  getUser(_id: String!): User
  getUserMandalaCharts(input: GetUserMandalaChartsInput!): GetUserMandalaChartsResponse!
  recommendationForSubGoals(currentLanguage: String = "en", mainGoal: String!, selectedSubGoals: [String!]): RecommendationResponse!
}

type Recommendation {
  text: String!
}

type RecommendationFailure {
  errorType: RecommendationFailureType!
}

enum RecommendationFailureType {
  INVALID_REQUEST
  OPENAI_ERROR
}

union RecommendationResponse = RecommendationFailure | RecommendationSuccess

type RecommendationSuccess {
  recommendations: [Recommendation!]!
}

type ResetPasswordFailure {
  errorType: ResetPasswordFailureType!
}

enum ResetPasswordFailureType {
  INVALID_PASSWORD
  INVALID_TOKEN
}

union ResetPasswordResponse = ResetPasswordFailure | ResetPasswordSuccess

type ResetPasswordSuccess {
  success: Boolean!
}

type SignInFailure {
  errorType: SignInFailureType!
}

enum SignInFailureType {
  USER_NOT_FOUND
  WRONG_PASSWORD
}

union SignInResponse = SignInFailure | SignInSuccess

type SignInSuccess {
  token: String!
  user: User!
}

type SignUpFailure {
  errorType: SignUpFailureType!
}

enum SignUpFailureType {
  EXISTING_EMAIL
  INVALID_PASSWORD
}

union SignUpResponse = SignUpFailure | SignUpSuccess

type SignUpSuccess {
  isMailSent: Boolean!
}

type TokenInfo {
  expiresAt: DateTime
  isVerified: Boolean
  token: String
}

type UpdateMandalaChartFailure {
  errorType: UpdateMandalaChartFailureType!
}

enum UpdateMandalaChartFailureType {
  CHART_NOT_FOUND
  INVALID_INPUT
  NO_TITLE
  SERVER_ERROR
  UNAUTHORIZED_ACCESS
}

input UpdateMandalaChartInput {
  centerCell: MandalaCellInput!
  description: String
  mandalaChartId: ID!
  private: Boolean!
  surroundingCells: [MandalaCellInput]
  title: String!
}

union UpdateMandalaChartResponse = UpdateMandalaChartFailure | UpdateMandalaChartSuccess

type UpdateMandalaChartSuccess {
  _id: ID!
}

type User {
  _id: ID!
  createdAt: DateTime!
  email: String!
  emailVerification: TokenInfo!
  nickname: String!
  purchasedInfo: PurchasedInfo!
  resetPassword: TokenInfo!
}

type VerifyEmailFailure {
  errorType: VerifyEmailFailureType!
}

enum VerifyEmailFailureType {
  INVALID_TOKEN
  VERIFIED_EMAIL
}

union VerifyEmailResponse = VerifyEmailFailure | VerifyEmailSuccess

type VerifyEmailSuccess {
  success: Boolean!
}
